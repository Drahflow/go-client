package ldclient

import (
	"encoding/json"
)

// FeatureFlagsState is a snapshot of the state of all feature flags with regard to a
// specific user, generated by calling LDClient.AllFlagsState().
type FeatureFlagsState struct {
	flagValues   map[string]interface{}
	flagMetadata map[string]flagMetadata
	valid        bool
}

type flagMetadata struct {
	Variation            *int    `json:"variation,omitempty"`
	Version              int     `json:"version"`
	TrackEvents          bool    `json:"trackEvents"`
	DebugEventsUntilDate *uint64 `json:"debugEventsUntilDate,omitempty"`
}

func newFeatureFlagsState() FeatureFlagsState {
	return FeatureFlagsState{
		flagValues:   make(map[string]interface{}),
		flagMetadata: make(map[string]flagMetadata),
		valid:        true,
	}
}

func (s *FeatureFlagsState) addFlag(flag *FeatureFlag, value interface{}, variation *int) {
	s.flagValues[flag.Key] = value
	s.flagMetadata[flag.Key] = flagMetadata{
		Variation:            variation,
		Version:              flag.Version,
		TrackEvents:          flag.TrackEvents,
		DebugEventsUntilDate: flag.DebugEventsUntilDate,
	}
}

// IsValid returns true if this object contains a valid snapshot of feature flag state, or false if the
// state could not be computed (for instance, because the client was offline or there was no user).
func (s FeatureFlagsState) IsValid() bool {
	return s.valid
}

// GetFlagValue returns the value of an individual feature flag at the time the state was recorded. The
// return value will be nil if the flag returned the default value, or if there was no such flag.
func (s FeatureFlagsState) GetFlagValue(key string) interface{} {
	return s.flagValues[key]
}

// ToValuesMap returns a map of flag keys to flag values. If a flag would have evaluated to the default
// value, its value will be nil.
func (s FeatureFlagsState) ToValuesMap() map[string]interface{} {
	return s.flagValues
}

// ToJSONString returns a JSON string representation of the entire state map, in the format used by the
// LaunchDarkly JavaScript SDK. Use this method if you are passing data to the front end that will be
// used to "bootstrap" the JavaScript client.
func (s FeatureFlagsState) ToJSONString() (string, error) {
	var outerMap = make(map[string]interface{})
	for k, v := range s.flagValues {
		outerMap[k] = v
	}
	outerMap["$flagsState"] = s.flagMetadata
	json, err := json.Marshal(outerMap)
	return string(json), err
}
